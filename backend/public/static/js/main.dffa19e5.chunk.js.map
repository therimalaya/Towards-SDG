{"version":3,"sources":["spacex-logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","props","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","style","width","display","margin","src","logo","alt","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dffa19e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spacex-logo.0eeef033.png\";","import React from 'react';\nimport classNames from 'classname';\nimport Moment from 'react-moment';\nimport {Link} from 'react-router-dom';\n\nexport default function LaunchItem(props) {\n  const {launch: {flight_number, mission_name, launch_date_local, launch_success}} = props;\n  return <div className=\"card card-body mb-3\">\n    <div className=\"row\">\n      <div className=\"col-md-9\">\n        <h4>Mission: <span className={classNames({\n          'text-success': launch_success,\n          'text-danger': !launch_success\n        })}>{mission_name}</span></h4>\n        <p>Date: <Moment format=\"YYYY-MM-DD HH:MM\">{launch_date_local}</Moment></p>\n      </div>\n      <div className=\"col-md-3\">\n        <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n      </div>\n  </div>\n  </div>\n}\n","import React, {Fragment} from 'react';\n\nexport function MissionKey(props) {\n    return(\n      <div className=\"my-3\">\n        <p>\n          <span className=\"px-3 mr-2 bg-success\"/> Success\n        </p>\n        <p>\n          <span className=\"px-3 mr-2 bg-danger\"/> Failed\n        </p>\n      </div>\n    )\n}\nexport default MissionKey;\n","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag';\nimport {Query} from '@apollo/react-components';\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`\n\nexport class Launches extends Component {\n  render() {\n    return(\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey/>\n        <Query query={LAUNCHES_QUERY}>\n          {\n            ({ loading, error, data }) => {\n              if (loading) return <p>Loading...</p>;\n              if (error) console.log(error);\n              return(\n                <Fragment>\n                  {\n                    data.launches.map(launch=>(\n                      <LaunchItem key={launch.flight_number} launch={launch}/>\n                    ))\n                  }\n                </Fragment>\n              )\n            }\n          }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launches;\n","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from '@apollo/react-components';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classname';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n      launch_year\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n\n`;\n\nexport class Launch extends Component {\n\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return(\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n          {\n            ({loading, error, data}) => {\n              if (loading) return <h4>Loading...</h4>;\n              if (error) console.log(error);\n              const {launch: {mission_name, flight_number, launch_year, launch_success, rocket: {rocket_id, rocket_name, rocket_type}}} = data;\n              return <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-dark\">Mission:</span> {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Launch Number: {flight_number}</li>\n                  <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                  <li className=\"list-group-item\">\n                    Launch Successful: <span className={classNames({\n                      'text-success': launch_success,\n                      'text-danger': !launch_success\n                    })}>{launch_success ? 'Yes' : 'No'}</span>\n                  </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket Number: {rocket_id}</li>\n                  <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                  <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                </ul>\n                <hr/>\n                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n              </div>\n            }\n          }\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-components';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport logo from './spacex-logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            style={{width: 300, display: 'block', margin: 'auto'}}\n            src={logo}\n            alt=\"spacex-logo\"/>\n          <Route exact path=\"/\" component={Launches}/>\n          <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}